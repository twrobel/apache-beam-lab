Exercise #1
return [sum(map(element.lower().count, "aeiou"))]

Exercise #2
| 'Create food sightings' >> beam.Create(inputs)
| 'Add timestamps' >> beam.ParDo(AddTimestampFn())
| 'Get timestamps' >> beam.ParDo(GetTimestampFn())

Excercise #3

| beam.WindowInto(beam.window.FixedWindows(60))
| beam.Map(lambda element: element.food)
| beam.combiners.Count.PerElement()

Excercise #4

| beam.WindowInto(beam.window.SlidingWindows(60, 30))
| beam.Map(lambda element: element.food)
| beam.combiners.Count.PerElement()

Excercise #5

| beam.WindowInto(beam.window.Sessions(5*60))
| beam.Map(lambda element: element.food)
| beam.combiners.Count.PerElement()

Excercise #6
| beam.WindowInto(beam.window.GlobalWindows())
# | beam.WindowInto(beam.window.GlobalWindows(), trigger=Repeatedly(AfterCount(3)), accumulation_mode=AccumulationMode.ACCUMULATING)
| beam.Map(lambda element: element.food)
| beam.combiners.Count.PerElement()
trigger=Repeatedly(AfterCount(10)), accumulation_mode=AccumulationMode.DISCARDING